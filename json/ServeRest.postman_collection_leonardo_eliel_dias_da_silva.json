{
	"info": {
		"_postman_id": "10616231-33a2-4804-b68c-8ab8f58a3bc5",
		"name": "ServeRest",
		"description": "**O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.**\n\n**Não deixe de seguir o [autor do projeto](https://github.com/PauloGoncalvesBH) e deixar um star no repositório: [github.com/ServeRest/ServeRest](https://github.com/ServeRest/ServeRest)**\n\nEssa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest).\n\nEstá utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections.\n\nVai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'.\n\n\nMuito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG [Todas as letras](https://todasasletras.org/)** até o momento.\n\nO ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev).\n\nPrecisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto:\n\n\nContact Support:\n Name: Paulo Gonçalves",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45876169"
	},
	"item": [
		{
			"name": "/login",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parseia a resposta JSON para facilitar o acesso aos dados\r",
											"const responseBody = pm.response.json();\r",
											"\r",
											"// Verifica se o status code da resposta é 200 (OK)\r",
											"pm.test(\"Status code é 200 - Login com Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verifica se a resposta contém a mensagem de sucesso esperada\r",
											"pm.test(\"Corpo da resposta contém a mensagem de sucesso\", function () {\r",
											"    pm.expect(responseBody.message).to.eql(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Verifica se a resposta contém a chave 'authorization', que é o token\r",
											"pm.test(\"Corpo da resposta inclui o token de autorização\", function () {\r",
											"    pm.expect(responseBody).to.have.property('authorization');\r",
											"});\r",
											"\r",
											"// Armazena o token de autorização como uma variável de coleção para ser usado em outras requisições\r",
											"if (pm.response.code === 200) {\r",
											"    pm.collectionVariables.set(\"authToken\", responseBody.authorization);\r",
											"}\r",
											"\r",
											"// Exemplo de como testar o cenário de falha (execute com credenciais erradas)\r",
											"pm.test(\"Status code é 401 - Credenciais Inválidas\", function () {\r",
											"    // Este teste só passará se a requisição falhar com 401\r",
											"    if (pm.response.code === 401) {\r",
											"        pm.expect(responseBody.message).to.eql(\"Email e/ou senha inválidos\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"amdinfulano@qa.com.br\",\n  \"password\": \"adminfulano\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								},
								"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
							},
							"response": [
								{
									"name": "Login realizado com sucesso",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
								},
								{
									"name": "E-mail e/ou senha inválidos",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "/usuarios",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Este pré-script analisa o body da request e verifica se ele é válido de acordo com um schema JSON.\r",
											"let requestData; // Variable to hold the parsed request body data as a JSON object\r",
											"    // Tenta analisar o JSON do corpo da requisição\r",
											"    try {\r",
											"        // Acessa o corpo da requisição como texto e o converte para um objeto JSON\r",
											"        requestData = pm.request.body.toJSON();\r",
											"    } catch (e) {\r",
											"        // Se o JSON for inválido, o teste falha com uma mensagem clara\r",
											"        pm.expect.fail(\"O corpo da requisição não é um JSON válido: \" + e.message);\r",
											"        return; // Interrompe a execução do teste aqui\r",
											"    }\r",
											"\r",
											"// Define o esquema para validação do corpo da requisição\r",
											"var schema = {\r",
											"    // Especifica que o tipo do objeto deve ser \"object\"\r",
											"    \"type\": \"object\",\r",
											"    // Define as propriedades esperadas do objeto\r",
											"    \"items\": {\r",
											"        // A propriedade \"nome\" deve ser uma string\r",
											"        \"nome\": {\"type\":\"string\"},\r",
											"        // A propriedade \"email\" deve ser uma string\r",
											"        \"email\": { \"type\": \"string\" },\r",
											"        // A propriedade \"password\" deve ser uma string\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        // A propriedade \"administrador\" deve ser uma string\r",
											"        \"administrador\": { \"type\": \"string\" },\r",
											"        // Lista as propriedades que são obrigatórias\r",
											"        \"required\": [\"nome\", \"email\", \"password\", \"administrador\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"// Testa se o esquema do corpo da requisição é válido\r",
											"pm.test('Schema é válido', function () {\r",
											"    // Valida o requestData contra o schema definido e espera que o resultado seja verdadeiro\r",
											"    pm.expect(tv4.validate(requestData, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"// Cenário de Sucesso\r",
											"pm.test(\"Status code é 201 - Usuário Criado\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta de sucesso contém a mensagem correta e o _id\", function () {\r",
											"    pm.expect(responseBody.message).to.eql(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(responseBody).to.have.property('_id');\r",
											"});\r",
											"\r",
											"// Armazena o ID do novo usuário para usar em testes de GET, PUT, DELETE\r",
											"if (pm.response.code === 201) {\r",
											"    pm.collectionVariables.set(\"newUserId\", responseBody._id);\r",
											"}\r",
											"\r",
											"// Cenário de E-mail Duplicado (execute com um e-mail que já existe)\r",
											"pm.test(\"Status code é 400 - E-mail Duplicado\", function () {\r",
											"    if (pm.response.code === 400) {\r",
											"        pm.expect(responseBody.message).to.eql(\"Este email já está sendo usado\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Cenário de Campo Obrigatório Faltante (execute sem o campo 'email', por exemplo)\r",
											"pm.test(\"Status code é 400 - Campo Obrigatório Ausente\", function () {\r",
											"    if (pm.response.code === 400) {\r",
											"        // A API ServeRest retorna a chave do campo como mensagem\r",
											"        pm.expect(responseBody).to.have.property('email');\r",
											"        pm.expect(responseBody.email).to.eql(\"email é obrigatório\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"adminbetrano🤣🤣🤣💕💕🤣🤣\",\n  \"email\": \"tememoji@qa.com.br\",\n  \"password\": \"adminfulano\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": [
								{
									"name": "Cadastro com sucesso",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/usuarios",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
								},
								{
									"name": "E-mail já cadastrado",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/usuarios",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
								},
								{
									"name": "Teste com body da request com campos faltando/inválido",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"😃👍🎉\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/usuarios",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "{_id}",
							"item": [
								{
									"name": "Buscar usuário por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"const userId = pm.collectionVariables.get(\"newUserId\"); // Pega o ID salvo anteriormente\r",
													"\r",
													"// Cenário de Sucesso\r",
													"pm.test(\"Status code é 200 - Usuário Encontrado\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"O usuário retornado possui o ID correto\", function () {\r",
													"    pm.expect(responseBody._id).to.eql(userId);\r",
													"});\r",
													"\r",
													"// Cenário de Usuário Não Encontrado (execute com um ID inválido)\r",
													"pm.test(\"Status code é 400 - Usuário Não Encontrado\", function () {\r",
													"    if (pm.response.code === 400) {\r",
													"        pm.expect(responseBody.message).to.eql(\"Usuário não encontrado\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newUserId}}",
													"description": "(Required) ID do usuário"
												}
											]
										}
									},
									"response": [
										{
											"name": "Usuário encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
										},
										{
											"name": "Usuário não encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Listar usuários cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code é 200 - OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"A resposta deve ser uma lista de usuários\", function () {\r",
											"    pm.expect(responseBody).to.have.property('usuarios');\r",
											"    pm.expect(responseBody.usuarios).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "string",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "string",
											"disabled": true
										},
										{
											"key": "email",
											"value": "string",
											"disabled": true
										},
										{
											"key": "password",
											"value": "123",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Lista de usuários",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usuarios?_id=string&nome=string&email=string&password=string&administrador=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios"
											],
											"query": [
												{
													"key": "_id",
													"value": "string"
												},
												{
													"key": "nome",
													"value": "string"
												},
												{
													"key": "email",
													"value": "string"
												},
												{
													"key": "password",
													"value": "string"
												},
												{
													"key": "administrador",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "{_id}",
							"item": [
								{
									"name": "Editar usuário",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "0uxuPY0cbmQhpEz1",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": [
										{
											"name": "Alterado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
										},
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "E-mail já cadastrado",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "{_id}",
							"item": [
								{
									"name": "Excluir usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"const userId = pm.collectionVariables.get(\"newUserId\"); // Pega o ID salvo anteriormente\r",
													"\r",
													"// Cenário de Sucesso\r",
													"pm.test(\"Status code é 200 - Usuário Encontrado\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"O usuário retornado possui o ID correto\", function () {\r",
													"    pm.expect(responseBody._id).to.eql(userId);\r",
													"});\r",
													"\r",
													"// Cenário de Usuário Não Encontrado (execute com um ID inválido)\r",
													"pm.test(\"Status code é 400 - Usuário Não Encontrado\", function () {\r",
													"    if (pm.response.code === 400) {\r",
													"        pm.expect(responseBody.message).to.eql(\"Usuário não encontrado\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newUserId}}",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido excluir usuário com carrinho."
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Nenhum registro excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
										},
										{
											"name": "Usuário com carrinho cadastrado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "KuLxhVPrj4I4xXwO"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "/produtos",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "{_id}",
							"item": [
								{
									"name": "Buscar produto por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"pm.test(\"Status code é 200 e produto encontrado\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Salva a quantidade inicial em uma variável de coleção\r",
													"const initialQuantity = responseBody.quantidade;\r",
													"pm.collectionVariables.set(\"initialProductQuantity\", initialQuantity);\r",
													"console.log(\"Estoque Inicial Salvo:\", initialQuantity);\r",
													"\r",
													"//\r",
													"const finalQuantity = responseBody.quantidade;\r",
													"\r",
													"console.log(\"Estoque Inicial:\", initialQuantity);\r",
													"console.log(\"Estoque Final:\", finalQuantity);\r",
													"\r",
													"pm.test(\"Estoque do produto foi restaurado para a quantidade inicial\", function () {\r",
													"    pm.expect(finalQuantity).to.eql(initialQuantity);\r",
													"});\r",
													"\r",
													"// // Limpa a variável para a próxima execução\r",
													"pm.collectionVariables.unset(\"initialProductQuantity\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "BeeJh5lz3k6kSIzA",
													"description": "(Required) ID do produto"
												}
											]
										}
									},
									"response": [
										{
											"name": "Produto encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381,\n  \"_id\": \"BeeJh5lz3k6kSIzA\"\n}"
										},
										{
											"name": "Produto não encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Produto não encontrado\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Listar produtos cadastrados",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": "string",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "string",
											"disabled": true
										},
										{
											"key": "preco",
											"value": "5722",
											"disabled": true
										},
										{
											"key": "descricao",
											"value": "string",
											"disabled": true
										},
										{
											"key": "quantidade",
											"value": "65",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Lista de produtos",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/produtos?_id=string&nome=string&preco=5722&descricao=string&quantidade=65",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos"
											],
											"query": [
												{
													"key": "_id",
													"value": "string"
												},
												{
													"key": "nome",
													"value": "string"
												},
												{
													"key": "preco",
													"value": "5722"
												},
												{
													"key": "descricao",
													"value": "string"
												},
												{
													"key": "quantidade",
													"value": "65"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"quantidade\": 2,\n  \"produtos\": [\n    {\n      \"nome\": \"Logitech MX Vertical\",\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381,\n      \"_id\": \"BeeJh5lz3k6kSIzA\"\n    },\n    {\n      \"nome\": \"Samsung 60 polegadas\",\n      \"preco\": 5240,\n      \"descricao\": \"TV\",\n      \"quantidade\": 49977,\n      \"_id\": \"K6leHdftCeOJj8BJ\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "{_id}",
							"item": [
								{
									"name": "Excluir produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Lembre-se de configurar a autenticação Bearer Token\r",
													"const responseBody = pm.response.json();\r",
													"\r",
													"// Cenário de Sucesso\r",
													"pm.test(\"Status code é 200 - Produto Excluído\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Resposta de exclusão com sucesso contém a mensagem correta\", function () {\r",
													"    pm.expect(responseBody.message).to.eql(\"Registro excluído com sucesso\");\r",
													"});\r",
													"\r",
													"// Cenário de Produto em Carrinho (requer setup prévio)\r",
													"pm.test(\"Status code é 400 - Não é permitido excluir produto de carrinho\", function () {\r",
													"    if (pm.response.code === 400) {\r",
													"        pm.expect(responseBody.message).to.eql(\"Não é permitido excluir produto que faz parte de carrinho\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newProductId}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido excluir produto que faz parte de carrinho."
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Nenhum registro excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
										},
										{
											"name": "Produto faz parte de carrinho",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido excluir produto que faz parte de carrinho\",\n  \"idCarrinho\": [\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\",\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\"\n  ]\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "{_id}",
							"item": [
								{
									"name": "Editar produto",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Logitech MH Vertical\",\n  \"preco\": \"470\",\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 1000\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newProductId}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": [
										{
											"name": "Alterado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
										},
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Lembre-se de configurar a autenticação Bearer Token nesta requisição usando a variável {{authToken}}\r",
											"const responseBody = pm.response.json();\r",
											"\r",
											"// Cenário de Sucesso\r",
											"pm.test(\"Status code é 201 - Produto Criado\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta de sucesso contém a mensagem correta e o _id do produto\", function () {\r",
											"    pm.expect(responseBody.message).to.eql(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(responseBody).to.have.property('_id');\r",
											"});\r",
											"\r",
											"// Armazena o ID do novo produto para usar em outros testes\r",
											"if (pm.response.code === 201) {\r",
											"    pm.collectionVariables.set(\"newProductId\", responseBody._id);\r",
											"}\r",
											"\r",
											"// Cenários de Falha\r",
											"pm.test(\"Status code é 400, 401 ou 403 para cenários de falha\", function() {\r",
											"    if (pm.response.code === 400) {\r",
											"        pm.expect(responseBody.message).to.eql(\"Já existe produto com esse nome\");\r",
											"    } else if (pm.response.code === 401) {\r",
											"        pm.expect(responseBody.message).to.include(\"Token de acesso ausente\");\r",
											"    } else if (pm.response.code === 403) {\r",
											"        pm.expect(responseBody.message).to.eql(\"Rota exclusiva para administradores\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Galaxy Buds FE\",\n  \"preco\": 250,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								},
								"description": "Não é permitido cadastrar produto com nome já utilizado"
							},
							"response": [
								{
									"name": "Cadastro com sucesso",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/produtos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
								},
								{
									"name": "Já existe produto com esse nome",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/produtos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
								},
								{
									"name": "Token ausente, inválido ou expirado",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/produtos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
								},
								{
									"name": "Rota exclusiva para administradores (`administrador = true`)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/produtos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "/carrinhos",
			"item": [
				{
					"name": "DELETE",
					"item": [
						{
							"name": "/cancelar-compra",
							"item": [
								{
									"name": "Excluir carrinho e retornar produtos para estoque",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Fixed potential error with response handling\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Test para verificar se a mensagem de sucesso está presente na resposta\r",
													"pm.test(\"Mensagem de sucesso está presente\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.exist;\r",
													"    pm.expect(response.message).to.be.a('string');\r",
													"});\r",
													"\r",
													"// Test para verificar a restauração do estoque do produto\r",
													"pm.test(\"Verificar a restauração do estoque do produto\", function () {\r",
													"    // Supondo que temos a quantidade inicial do estoque como uma variável de ambiente\r",
													"    const estoqueInicial = pm.environment.get(\"estoqueInicial\");\r",
													"    \r",
													"    // Aqui você deve fazer uma chamada para obter a quantidade atual do estoque\r",
													"    // Isso pode ser feito com uma requisição GET para o endpoint que retorna o estoque do produto\r",
													"    pm.sendRequest({\r",
													"        url: `${pm.environment.get(\"baseUrl\")}/produtos/{produtoId}/estoque`, // Substitua {produtoId} pelo ID real do produto\r",
													"        method: 'GET'\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"        }\r",
													"        const estoqueAtual = res.json().quantidade; // Assumindo que a resposta tem a propriedade 'quantidade'\r",
													"        pm.expect(estoqueAtual).to.equal(estoqueInicial); // Verifica se a quantidade atual é igual à inicial\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										},
										"description": "Ao cancelar uma compra o carrinho é excluído e o estoque dos produtos desse carrinho é reabastecido.\nO carrinho excluído será o vinculado ao usuário do `token` utilizado.\n"
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"cancelar-compra"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"cancelar-compra"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "/concluir-compra",
							"item": [
								{
									"name": "Excluir carrinho",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Lembre-se de configurar a autenticação Bearer Token\r",
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code é 200 - Compra Concluída\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Resposta de sucesso contém a mensagem correta\", function () {\r",
													"    pm.expect(responseBody.message).to.eql(\"Registro excluído com sucesso\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/concluir-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										},
										"description": "Ao concluir uma compra o carrinho é excluído.\nO carrinho excluído será o vinculado ao usuário do `token` utilizado.\n"
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/concluir-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"concluir-compra"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/concluir-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"concluir-compra"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Lembre-se de configurar a autenticação Bearer Token\r",
											"const responseBody = pm.response.json();\r",
											"\r",
											"// Cenário de Sucesso\r",
											"pm.test(\"Status code é 201 - Carrinho Criado\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta de sucesso contém a mensagem correta\", function () {\r",
											"    pm.expect(responseBody.message).to.eql(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Cenários de Falha\r",
											"pm.test(\"Status code é 400 para cenários de falha\", function() {\r",
											"    if (pm.response.code === 400) {\r",
											"        // Valide a mensagem específica do seu cenário de teste de falha\r",
											"        // Ex: pm.expect(responseBody.message).to.eql(\"Produto não encontrado\");\r",
											"        // Ex: pm.expect(responseBody.message).to.eql(\"Produto não possui quantidade suficiente\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"produtos\": [\n    {\n        \"idProduto\": \"MmLwQJsu77j2G80V\",\n        \"quantidade\": \"500\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								},
								"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
							},
							"response": [
								{
									"name": "Cadastro com sucesso",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"string\",\n    \"quantidade\": 4611\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/carrinhos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
								},
								{
									"name": "Algo deu errado",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"string\",\n    \"quantidade\": 4611\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/carrinhos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
								},
								{
									"name": "Token ausente, inválido ou expirado",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"string\",\n    \"quantidade\": 4611\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/carrinhos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "{_id}",
							"item": [
								{
									"name": "Buscar carrinho por ID",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "qbMqntef4iTOwWfg",
													"description": "(Required) ID do carrinho"
												}
											]
										}
									},
									"response": [
										{
											"name": "Carrinho encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"string\",\n      \"quantidade\": 4062,\n      \"precoUnitario\": 797\n    },\n    {\n      \"idProduto\": \"string\",\n      \"quantidade\": 123,\n      \"precoUnitario\": 7734\n    }\n  ],\n  \"precoTotal\": 6180,\n  \"quantidadeTotal\": 3,\n  \"idUsuario\": \"0uxuPY0cbmQhpEz1\",\n  \"_id\": \"qbMqntef4iTOwWfg\"\n}"
										},
										{
											"name": "Carrinho não encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														":_id"
													],
													"variable": [
														{
															"key": "_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Carrinho não encontrado\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Listar carrinhos cadastrados",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/carrinhos?idUsuario=KuLxhVPrj4I4xXwO",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "_id",
											"value": "string",
											"disabled": true
										},
										{
											"key": "precoTotal",
											"value": "5722",
											"disabled": true
										},
										{
											"key": "quantidadeTotal",
											"value": "65",
											"disabled": true
										},
										{
											"key": "idUsuario",
											"value": "KuLxhVPrj4I4xXwO"
										}
									]
								},
								"description": "Os carrinhos retornados são únicos por usuário"
							},
							"response": [
								{
									"name": "Lista de carrinhos",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/carrinhos?_id=string&precoTotal=5722&quantidadeTotal=65&idUsuario=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos"
											],
											"query": [
												{
													"key": "_id",
													"value": "string"
												},
												{
													"key": "precoTotal",
													"value": "5722"
												},
												{
													"key": "quantidadeTotal",
													"value": "65"
												},
												{
													"key": "idUsuario",
													"value": "string"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"quantidade\": 1,\n  \"carrinhos\": [\n    {\n      \"produtos\": [\n        {\n          \"idProduto\": \"string\",\n          \"quantidade\": 7924,\n          \"precoUnitario\": 5561\n        },\n        {\n          \"idProduto\": \"string\",\n          \"quantidade\": 4624,\n          \"precoUnitario\": 4783\n        }\n      ],\n      \"precoTotal\": 10950,\n      \"quantidadeTotal\": 3,\n      \"idUsuario\": \"0uxuPY0cbmQhpEz1\",\n      \"_id\": \"aFOUqntef4iaOwWfg\"\n    },\n    {\n      \"produtos\": [\n        {\n          \"idProduto\": \"string\",\n          \"quantidade\": 6092,\n          \"precoUnitario\": 343\n        },\n        {\n          \"idProduto\": \"string\",\n          \"quantidade\": 6699,\n          \"precoUnitario\": 7947\n        }\n      ],\n      \"precoTotal\": 10950,\n      \"quantidadeTotal\": 3,\n      \"idUsuario\": \"0uxuPY0cbmQhpEz1\",\n      \"_id\": \"aFOUqntef4iaOwWfg\"\n    }\n  ]\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "//localhost:3000"
		},
		{
			"key": "newProductId",
			"value": "BeeJh5lz3k6kSIzA",
			"type": "string"
		},
		{
			"key": "newUserId",
			"value": ""
		},
		{
			"key": "authToken",
			"value": ""
		}
	]
}